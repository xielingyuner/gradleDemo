// 项目依赖插件
plugins {
    id 'org.springframework.boot' version '2.6.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

//  项目组
group = 'com.example'
//  项目版本号
version = '0.0.1-SNAPSHOT'
//  对应的JVM版本
sourceCompatibility = '11'

// 使用maven做为jar包的信赖管理，通过maven仓库下载项目所需的信赖包
apply plugin: 'maven'
// 指定项目为java项目，项目编译(在项目提示符下执行：gradle build)时生成项目的jar包。
apply plugin: 'java'
// IntelliJ IDEA 插件
apply plugin: 'idea'
// war包插件:指定web项目，项目编译(在项目提示符下执行：gradle build)时生成项目的war包。
apply plugin: 'war'
// 插件将构建web项目的开发环境，生成所需要的.project,.classpath等文件。因为我web开发使用的是eclipse-j2ee版本，所以指定为wtp环境。
apply plugin: 'eclipse-wtp'
// 加入jetty的支持，代码修改后直接执行命令gradle jettyRun即可运行web项目。
apply plugin: 'jetty'

//  指定本地仓 远程仓
repositories {
    //    指定本地仓, 引用本地仓库
    mavenLocal()
    //    使用阿里巴巴的maven仓库
    maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
    //    使用开源中国的maven仓库
    maven { url 'http://maven.oschina.net/content/groups/public/' }
    //    告诉Gradle从Maven中央仓库获取工具库的内容 / https://repo.maven.apache.org/maven2/
    mavenCentral()
}

dependencies {

//  compile
//  compileConly
//  runtimeOnly
//  implementation

//  testCompileOnly
//  testImplementation
//  testAnnotationProcessor
//  testRuntimeOnly

//  jasper
//  antContrib
//  externalLibs
//  deploymentTools
//  js
//  androidTestCompile
//  api
//  annotationProcessor
//  provided
//  apk
//  providedCompile
//  AndroidTestImplementation
//  debugApi

    compileOnly 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter'
    testCompileOnly 'org.springframework.boot:spring-boot-starter'
    testImplementation 'org.springframework.boot:spring-boot-starter'
    testAnnotationProcessor 'org.springframework.boot:spring-boot-starter'
    jasper 'org.springframework.boot:spring-boot-starter'
}

tasks.named('test') {
    useJUnitPlatform()
}